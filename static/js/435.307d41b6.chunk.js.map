{"version":3,"file":"static/js/435.307d41b6.chunk.js","mappings":"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","sources":["components/Form/ProjectForm.styled.js","redux/contacts/selectors.js","components/Form/Form.jsx","components/ContactsList/ContactsListStyled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","redux/filter/selectors.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nexport const FormStyles = styled(Form)`\n  margin: 0 auto;\n  padding: 20px;\n  width: 250px;\n  height: auto;\n  border-radius: 5%;\n  text-align: center;\n  border: 4px solid aqua;\n  border-radius: 5%;\n`;\nexport const FieldStyles = styled(Field)`\n  margin-bottom: 10px;\n`;\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  display: block;\n  color: red;\n  font-size: 10px;\n  text-align: center;\n  border: 1px solid red;\n`;\n","export const getContacts = state => state.myContacts.contacts.items;\nexport const getIsLoading = state => state.myContacts.contacts.isLoading;\nexport const getError = state => state.myContacts.contacts.error;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {\n  FormStyles,\n  FieldStyles,\n  ErrorMessageStyled,\n} from './ProjectForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst phoneRegExp =\n  /^\\(?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\nconst nameValid = /^([A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff\\s]*)$/gi;\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(nameValid, 'Name can only contain Latin letters.')\n    .required('Sorry, but Name is a required field'),\n  number: yup\n    .string()\n    .length(12, ' Sorry, but the phone number should consist of 12 characters')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Sorry, but Number is a required field'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const updateContacts = (values, actions) => {\n    if (contacts.find(({ name }) => name === values.name)) {\n      Notify.warning(`${values.name} is already in contacts`);\n      actions.resetForm();\n      return;\n    }\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={(e, actions) => updateContacts(e, actions)}\n      validationSchema={schema}\n    >\n      <FormStyles>\n        <label>\n          Name\n          <FieldStyles type=\"text\" name=\"name\" />\n        </label>{' '}\n        <ErrorMessageStyled name=\"name\" component=\"span\" />\n        <label>\n          Number\n          <FieldStyles type=\"tel\" name=\"number\" />\n        </label>\n        <ErrorMessageStyled name=\"number\" component=\"span\" />\n        <button type=\"submit\">Add contact</button>\n      </FormStyles>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\nimport { ListItem } from './ContactsListStyled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactList = ({ data }) => {\n  const dispatch = useDispatch();\n  return (\n    <ul>\n      {data.map(item => (\n        <ListItem key={item.id}>\n          {`${item.name} : ${item.number}`}\n          <button\n            onClick={() => {\n              return dispatch(deleteContact(item.id));\n            }}\n          >\n            Delete\n          </button>\n        </ListItem>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      />{' '}\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const InformationArea = styled.div`\n  margin-top: 20px;\n  padding: 20px;\n  border: 4px solid aqua;\n  border-radius: 5%;\n`;\n","export const getFilter = state => state.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Loading, Report } from 'notiflix/build/notiflix-loading-aio';\nimport { ContactForm } from 'components/Form/Form';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { InformationArea } from './Contacts.styled';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  getContacts,\n  getIsLoading,\n  getError,\n} from '../../redux/contacts/selectors';\nimport { getFilter } from 'redux/filter/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const loading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const filterContacts = () => {\n    return contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter.toUpperCase())\n    );\n  };\n  return (\n    <>\n      {error &&\n        Report.failure(\n          'Sorry, something going wrong',\n          'Please try again.',\n          'Okay'\n        )}\n      {loading && !error\n        ? Loading.arrows({ svgColor: ' aqua' })\n        : Loading.remove()}\n      <ContactForm />\n      <InformationArea>\n        <h2>CONTACTS</h2>\n        <Filter />\n        {contacts.length > 0 && <ContactList data={filterContacts()} />}\n      </InformationArea>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormStyles","styled","Form","FieldStyles","Field","ErrorMessageStyled","ErrorMessage","getContacts","state","myContacts","contacts","items","getIsLoading","isLoading","getError","error","schema","yup","shape","name","matches","required","number","length","ContactForm","useSelector","dispatch","useDispatch","initialValues","onSubmit","e","actions","values","find","Notify","resetForm","addContact","updateContacts","validationSchema","type","component","ListItem","ContactList","data","map","item","onClick","deleteContact","id","Filter","onChange","changeFilter","currentTarget","value","InformationArea","getFilter","filter","useEffect","fetchContacts","loading","Report","Loading","svgColor","toUpperCase","includes"],"sourceRoot":""}